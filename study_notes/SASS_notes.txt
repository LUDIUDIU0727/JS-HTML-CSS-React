One feature of Sass that's different than CSS is it uses variables. 
They are declared and set to store data, similar to JavaScript.
1.SASS（sassy css）是一种css开发工具，提供了许多便利的写法，使得css的开发变得简单，可维护。

2.先安装ruby，再安装sass， 命令： gem install SASS

3.SASS文件是普通的文本文件，里面可以直接使用CSS语法，文件后缀名是.scss

4.SASS允许使用变量，所有变量以$开头:
: $blue:#1875e7
div{color:$blud}

如果变量需要镶嵌在字符之中，就必须要写在#{}之中:
: $side:left;
.rounded{border-#{side}-radius:5px;}

5.SASS允许再代码中使用算式。
body{
    margin:(14px/2);
    top:50px+100px;
    right:$var * 10%;
}

6.SASS允许选择器嵌套:
div{
    h1{
        color:red
    }
}
属性也可以嵌套，比如boder-color属性可以写成
p{
    border:{
        color:red
    }
}

在嵌套的代码块内，可以使用&引用父元素，比如a:hover可以写成
a{
    &:hover{color:#ffb3ff;}
}

7. /* 重要注释 */

8.SASS允许一个选择器继承另一个选择器，比如现有class1:
.class1{
    border:1px solid #ddd;
}
class2要继承class1就要使用@extend命令
.class2{
    @extend .class1;
    font-size:120%;
}

9.In Sass, a mixin is a group of CSS declarations that can be reused throughout the style sheet.
Newer CSS features take time before they are fully adopted and ready to use in all browsers. 
As features are added to browsers, CSS rules using them may need vendor prefixes. Consider box-shadow:
div {
  -webkit-box-shadow: 0px 0px 4px #fff;
  -moz-box-shadow: 0px 0px 4px #fff;
  -ms-box-shadow: 0px 0px 4px #fff;
  box-shadow: 0px 0px 4px #fff;
}
It's a lot of typing to re-write this rule for all the elements that have a box-shadow, or to change each value to test different effects. 
Mixins are like functions for CSS. Here is how to write one:

@mixin box-shadow($x, $y, $blur, $c){ 
  -webkit-box-shadow: $x $y $blur $c;
  -moz-box-shadow: $x $y $blur $c;
  -ms-box-shadow: $x $y $blur $c;
  box-shadow: $x $y $blur $c;
}

The definition starts with @mixin followed by a custom name. 
The parameters (the $x, $y, $blur, and $c in the example above) are optional. 
Now any time a box-shadow rule is needed, only a single line calling the mixin replaces having to type all the vendor prefixes. 
A mixin is called with the @include directive:

div {
  @include box-shadow(0px, 0px, 4px, #fff);
}

@mixin border-radius($radius){
  -webkit-border-radius:$radius;
  -moz-border-radius: $radius;
  -ms-border-radius: $radius;
  border-radius: $radius;
}

div{
  @include border-radius(15px);
}


10.The @if directive in Sass is useful to test for a specific case - it works just like the if statement in JavaScript.
@mixin make-bold($bool) {
  @if $bool == true {
    font-weight: bold;
  }
}

@mixin text-effect($val) {
  @if $val == danger {
    color: red;
  }
  @else if $val == alert {
    color: yellow;
  }
  @else if $val == success {
    color: green;
  }
  @else {
    color: black;
  }
}

11.The @for directive adds styles in a loop, very similar to a for loop in JavaScript.
@for is used in two ways: "start through end" or "start to end". 
The main difference is that the "start to end" excludes the end number as part of the count, 
and "start through end" includes the end number as part of the count.
@for $i from 1 through 12 {
  .col-#{$i} { width: 100%/12 * $i; }
}
The #{$i} part is the syntax to combine a variable (i) with text to make a string. 
When the Sass file is converted to CSS, it looks like this:
.col-1 {
  width: 8.33333%;
}

.col-2 {
  width: 16.66667%;
}

...

.col-12 {
  width: 100%;
}
This is a powerful way to create a grid layout. Now you have twelve options for column widths available as CSS classes.

12.
