{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from './counter';\nimport authReducer from './auth'; //you should never change the existing state,you should return a brand new state\n//in redux toolkit you can use state.count++(still not manipulating the existing data)\n// const counterReducer = (state = initialState, action) => {\n//     if (action.type === 'increment') {\n//         return {\n//             counter: state.counter + 1,\n//             showCounter: state.showCounter\n//         };\n//     }\n//     if (action.type === 'decrement') {\n//         return {\n//             counter: state.counter - 1,\n//             showCounter: state.showCounter\n//         };\n//     }\n//     if (action.type === 'increase') {\n//         return {\n//             counter: state.counter + action.amount,\n//             showCounter: state.showCounter\n//         };\n//     }\n//     if (action.type === 'toggle') {\n//         return {\n//             counter: state.counter,\n//             showCounter: !state.showCounter\n//         };\n//     }\n//     return state;\n// };\n// const store = createStore(counterReducer);\n//----------------------------------------------------------------------------------\n//counterSlice.actions.toggleCounter() returns an action object of this shape:\n//{ type:'some auto-generated unique identifier'}\n\nconst store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    auth: authReducer\n  }\n});\nexport default store;","map":{"version":3,"sources":["/Users/lulu/Desktop/study/my-app08/src/store/index.js"],"names":["configureStore","counterReducer","authReducer","store","reducer","counter","auth"],"mappings":"AAAA,SAASA,cAAT,QAA+B,kBAA/B;AACA,OAAOC,cAAP,MAA2B,WAA3B;AACA,OAAOC,WAAP,MAAwB,QAAxB,C,CAGA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AACA;;AAEA,MAAMC,KAAK,GAAGH,cAAc,CAAC;AACzBI,EAAAA,OAAO,EAAE;AAAEC,IAAAA,OAAO,EAAEJ,cAAX;AAA2BK,IAAAA,IAAI,EAAEJ;AAAjC;AADgB,CAAD,CAA5B;AAKA,eAAeC,KAAf","sourcesContent":["import { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from './counter';\nimport authReducer from './auth';\n\n\n//you should never change the existing state,you should return a brand new state\n//in redux toolkit you can use state.count++(still not manipulating the existing data)\n\n\n\n// const counterReducer = (state = initialState, action) => {\n//     if (action.type === 'increment') {\n//         return {\n//             counter: state.counter + 1,\n//             showCounter: state.showCounter\n//         };\n//     }\n\n//     if (action.type === 'decrement') {\n//         return {\n//             counter: state.counter - 1,\n//             showCounter: state.showCounter\n//         };\n//     }\n\n//     if (action.type === 'increase') {\n//         return {\n//             counter: state.counter + action.amount,\n//             showCounter: state.showCounter\n//         };\n//     }\n\n//     if (action.type === 'toggle') {\n//         return {\n//             counter: state.counter,\n//             showCounter: !state.showCounter\n//         };\n//     }\n\n//     return state;\n// };\n\n// const store = createStore(counterReducer);\n\n\n//----------------------------------------------------------------------------------\n//counterSlice.actions.toggleCounter() returns an action object of this shape:\n//{ type:'some auto-generated unique identifier'}\n\nconst store = configureStore({\n    reducer: { counter: counterReducer, auth: authReducer }\n});\n\n\nexport default store;"]},"metadata":{},"sourceType":"module"}