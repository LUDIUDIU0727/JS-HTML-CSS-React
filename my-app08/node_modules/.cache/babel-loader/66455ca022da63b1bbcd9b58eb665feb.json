{"ast":null,"code":"import { createSlice, configureStore } from '@reduxjs/toolkit'; //you should never change the existing state,you should return a brand new state\n//in redux toolkit you can use state.count++(still not manipulating the existing data)\n\nconst initialState = {\n  counter: 0,\n  showCounter: true\n};\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: initialState,\n  reducers: {\n    increment(state) {\n      state.count++;\n    },\n\n    decrement(state) {\n      state.count--;\n    },\n\n    increase(state, action) {\n      state.count += action.payload;\n    },\n\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n\n  }\n}); // const counterReducer = (state = initialState, action) => {\n//     if (action.type === 'increment') {\n//         return {\n//             counter: state.counter + 1,\n//             showCounter: state.showCounter\n//         };\n//     }\n//     if (action.type === 'decrement') {\n//         return {\n//             counter: state.counter - 1,\n//             showCounter: state.showCounter\n//         };\n//     }\n//     if (action.type === 'increase') {\n//         return {\n//             counter: state.counter + action.amount,\n//             showCounter: state.showCounter\n//         };\n//     }\n//     if (action.type === 'toggle') {\n//         return {\n//             counter: state.counter,\n//             showCounter: !state.showCounter\n//         };\n//     }\n//     return state;\n// };\n// const store = createStore(counterReducer);\n//----------------------------------------------------------------------------------\n//counterSlice.actions.toggleCounter() returns an action object of this shape:\n//{ type:'some auto-generated unique identifier'}\n\nconst store = configureStore({\n  reducer: counterSlice.reducer\n});\nexport const counterActions = counterSlice.actions;\nexport default store;","map":{"version":3,"sources":["/Users/lulu/Desktop/study/my-app08/src/store/index.js"],"names":["createSlice","configureStore","initialState","counter","showCounter","counterSlice","name","reducers","increment","state","count","decrement","increase","action","payload","toggleCounter","store","reducer","counterActions","actions"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,cAAtB,QAA4C,kBAA5C,C,CAEA;AACA;;AACA,MAAMC,YAAY,GAAG;AAAEC,EAAAA,OAAO,EAAE,CAAX;AAAcC,EAAAA,WAAW,EAAE;AAA3B,CAArB;AAEA,MAAMC,YAAY,GAAGL,WAAW,CAAC;AAC7BM,EAAAA,IAAI,EAAE,SADuB;AAE7BJ,EAAAA,YAAY,EAAEA,YAFe;AAG7BK,EAAAA,QAAQ,EAAE;AACNC,IAAAA,SAAS,CAACC,KAAD,EAAQ;AACbA,MAAAA,KAAK,CAACC,KAAN;AACH,KAHK;;AAINC,IAAAA,SAAS,CAACF,KAAD,EAAQ;AACbA,MAAAA,KAAK,CAACC,KAAN;AACH,KANK;;AAONE,IAAAA,QAAQ,CAACH,KAAD,EAAQI,MAAR,EAAgB;AACpBJ,MAAAA,KAAK,CAACC,KAAN,IAAeG,MAAM,CAACC,OAAtB;AACH,KATK;;AAUNC,IAAAA,aAAa,CAACN,KAAD,EAAQ;AACjBA,MAAAA,KAAK,CAACL,WAAN,GAAoB,CAACK,KAAK,CAACL,WAA3B;AACH;;AAZK;AAHmB,CAAD,CAAhC,C,CAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AACA;;AAEA,MAAMY,KAAK,GAAGf,cAAc,CAAC;AACzBgB,EAAAA,OAAO,EAAEZ,YAAY,CAACY;AADG,CAAD,CAA5B;AAIA,OAAO,MAAMC,cAAc,GAAGb,YAAY,CAACc,OAApC;AACP,eAAeH,KAAf","sourcesContent":["import { createSlice, configureStore } from '@reduxjs/toolkit';\n\n//you should never change the existing state,you should return a brand new state\n//in redux toolkit you can use state.count++(still not manipulating the existing data)\nconst initialState = { counter: 0, showCounter: true };\n\nconst counterSlice = createSlice({\n    name: 'counter',\n    initialState: initialState,\n    reducers: {\n        increment(state) {\n            state.count++;\n        },\n        decrement(state) {\n            state.count--;\n        },\n        increase(state, action) {\n            state.count += action.payload;\n        },\n        toggleCounter(state) {\n            state.showCounter = !state.showCounter;\n        }\n\n    }\n\n\n});\n\n// const counterReducer = (state = initialState, action) => {\n//     if (action.type === 'increment') {\n//         return {\n//             counter: state.counter + 1,\n//             showCounter: state.showCounter\n//         };\n//     }\n\n//     if (action.type === 'decrement') {\n//         return {\n//             counter: state.counter - 1,\n//             showCounter: state.showCounter\n//         };\n//     }\n\n//     if (action.type === 'increase') {\n//         return {\n//             counter: state.counter + action.amount,\n//             showCounter: state.showCounter\n//         };\n//     }\n\n//     if (action.type === 'toggle') {\n//         return {\n//             counter: state.counter,\n//             showCounter: !state.showCounter\n//         };\n//     }\n\n//     return state;\n// };\n\n// const store = createStore(counterReducer);\n\n\n//----------------------------------------------------------------------------------\n//counterSlice.actions.toggleCounter() returns an action object of this shape:\n//{ type:'some auto-generated unique identifier'}\n\nconst store = configureStore({\n    reducer: counterSlice.reducer\n});\n\nexport const counterActions = counterSlice.actions;\nexport default store;"]},"metadata":{},"sourceType":"module"}