redux analogy:
action creator               -> action   -> dispatch      -> reducers    -> state
person dropping off the form -> the form -> form receiver -> departments -> compiled department data

// three action creators
const createPolicy =(name,amount)=>{
  
  return {
    type:'CREATE_POLICY'
    payload:{
    name:name,
    amount:amount
  }       
  };
};


const deletePolicy =(name)=>{
  
  return {
    type:'DELETE_POLICY'
    payload:{
    name:name,
  }          
  };  
};

const createClaim=(name,amount)=>{
  return{
    type:'CREATE_CLAIM'
    payload:{
    
    name:name,
    amount:amount
  }
  }; 
};

//three reducers

const claimHistory=(oldListOfClaims=[],action)=>{
  if(action.type==='CREATE_CLAIM'){
    return [...oldListOfClaims,action.payload]
  }
  
  return oldListOfClaims;
  
};

const accounting =(bagOfMoney=100,action)=>{
  if(action.type==='CREATE_CLAIM'){
    return bagOfMoney-action.payload.amount;
 
  }
  else if(action.type==='CREATE_POLICY')
    {
      return bagOfMoney+action.payload.amount;
    }
  return bagOfMoney;
};

const policies = (listOfPolicies =[],action)=>{
  if(action.type==='CREATE_POLICY'){
    return [...listOfPolicies,action.payload.name];
    
  }
  
  if(action.type==='DELETE_POLICY'){
    return listOfPolicies.filter(name=>name!=action.payload.name);
  }
  
  return listOfPolicies;
  
};

//

const {createStore,combineReducers} = Redux;

const ourDepartments = combineReducers({
  accounting:accounting,
  claimHistory:claimHistory,
  policies:policies
})

const store = createStore(ourDepartments);

//some actions

store.dispatch(createPolicy('ALEX',20));
store.dispatch(createPolicy('JIM',20));

store.dispatch(createClaim('ALEX',120));

store.dispatch(deletePolicy('Bob));



To change state of our app, we call an action creator, it produces an action, gets fed to dispatch,
dispatch forwards the action to reducers, reducers create new state, wait until we need to update
state again.




