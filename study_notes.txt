//Note of udemy learning of React.js
Part1:

1.const and let

2.Arrow function: const myFunction=()=>{} 
(not more issues with the this keyword)
some examples of Arrow function:
-: (a) => {return a+100;}
-: (a,b)=>{let chunk=100; return a+b+chunk;}

3.Exports & Imports(Modules)
export default person       =>  import person from './xx.js' / import prs from './xx.js'
export const baseData = 10; =>  import {baseData} from './xx.js' / import {baseData as bas} from './xx.js' 
you can also import everything with * such as import * as bundled from 'xx.js', and all the value will be like bundled.baseData

4.Classes, properties and methods
Properties are like "variables" attached to classes/objects
Methods are like "functions" attached to classes/objects

5.Spread & Rest Operators
Spread is used to split up array elements OR object properties
: const newArray = [...oldArray,1,2] / const newObject = {...oldObject,newProp:5}
       is used to merge a list of function arguments into an array
: function sortArgs(...args){ return args.sort() }

6.Destructuring
 - Array Destructuring: [a,b]=['1','2'] console.log(a) //a
 - Object Destructuring {name}={name:'max',age:28} console.log(age) //28

7.Objects and arrays are reference types,if you reassign them, you are copying the pointer not the value.
so if you want to do this in a real copy way, you will have to create a new object and just copy properties.

Part2:
*React is all about "Components"

1.Components: reusable building blocks in your user interface
we combine HTML,CSS and JAVASCRIPT in all these components.
then we combine all these components to build the entire user interface.

* react allows you to create re-usable and reactive components consisting of HTML,CSS and JAVASCRIPT. 

2.Declarative Approach
Define the desired target states and let React figure out the actual Javascript DOM instructions depends on different situation.

3. npx create-react-app my-app
   cd my-app
   npm start

4. * A component in React is just a JavaScript function.

5.elements starting with an uppercase character are elements defined by developers.
  elements with lowercase elements are built in HTML elements.

6.Passing Data via 'Props'

7.useState hook. 
- all the hooks should only be called inside the function.
- they should be used directly inside component function.
- useState hook always return an array.
- useState(the value itself, updating function).
  such as => const [title, setTitle] = useState(props.title);
- the state is separated on a per component instance basis.
- whenever you update your state and depend on your previous state,
  setUserInput ((prevState)=>{
    return{...prevState,enteredTitle:event.target.value};
  });
- event.preventDefault()  used to prevent this request to be sent.
- two-way binding: can pass a new value back into the input.
- Lift state up: move data from a child component to some parent component

8. JS: Array.map()
* example: const array1=[1,4,9,16]; const map1=array1.map(x=>x*2);
//expected output: array[2,8,18,32]

9.setting css dynamically : <div className={`form-control ${!isValid ? 'invalid' : ''}`}>

10. styled components

11.A promise in JavaScript is exactly what it sounds like 
- you use it to make a promise to do something, usually asynchronously. When the task completes, you either fulfill your promise or fail to do so. 
Promise is a constructor function, so you need to use the new keyword to create one. It takes a function, as its argument, with two parameters - resolve and reject. 
These are methods used to determine the outcome of the promise.
A promise has three states: pending, fulfilled, and rejected. 
resolve is used when you want your promise to succeed, and reject is used when you want it to fail. These are methods that take an argument

Promises are most useful when you have a process that takes an unknown amount of time in your code (i.e. something asynchronous), often a server request. 
When you make a server request it takes some amount of time, and after it completes you usually want to do something with the response from the server. 
This can be achieved by using the then method. The then method is executed immediately after your promise is fulfilled with resolve. 
catch is the method used when your promise has been rejected. It is executed immediately after a promise's reject method is called. 

12. / /ig match strings rules

13.splice()'s first parameter represents the index on the array from which to begin removing elements, 
while the second parameter indicates the number of elements to delete. 

14.indexOf(), that allows us to quickly and easily check for the presence of an element on an array. indexOf() takes an element as a parameter, and when called, 
it returns the position, or index, of that element, or -1 if the element does not exist on the array.

15.own properties and prototype properties. Own properties are defined directly on the object instance itself. And prototype properties are defined on the prototype.

16.In JavaScript, a function always has access to the context in which it was created. This is called closure.

17.The reduce method iterates over each item in an array and returns a single value (i.e. string, number, object, array). This is achieved via a callback function that is called on each iteration.
The callback function accepts four arguments. The first argument is known as the accumulator, which gets assigned the return value of the callback function from the previous iteration, 
the second is the current element being processed, the third is the index of that element and the fourth is the array upon which reduce is called.

18.React portals need two things: a place you wannna port the component to, let the component know.
React.createPortal(your react node that should be rendered, a pointer to that container in the real DOM where this elements should be rendered in)

19.React Ref : you just want to read, you dont want to change anything, refs better.

20.side effects: angthing else exclude the main jobs, such as store data in browser storage, send HTTP request to backend servers.
to handle side effects, we use * useEffect() hook:
- useEffect( ()=>{...}, [dependencies]);
-the first is a function that should be executed after every component evaluation if the specified dependencies changed
-you side effect code goes into this function
-the second is a array full of dependencies, dependencies of this effect.
-specify your dependencies of your function here
useEffect第一个可执行任何带副作用的操作，加return，在组件卸载前执行，可以做一些收尾工作比如清除定时器/取消订阅等。


-- no dependency(second parameter) means it will only run once只会在第一次render()后执行。
-- useEffect hook可以看作是如下三个函数的组合，componentDidMount, componentDidUpdate, componentWillMount.

-- You learned, that you should add "everything" you use in the effect function as a dependency - i.e. all state variables and functions you use in there.
* You DON'T need to add state updating functions
*You also DON'T need to add "built-in" APIs or functions
*You also DON'T need to add variables or functions you might've defined OUTSIDE of your components 
You must add all "things" you use in your effect function if those "things" could change because your component (or some parent component) re-rendered. 

21.debouncing (setTimeOut)
22.clean up function. return ()=>{};

23.useReducer() hook: useReducer() can be used as a replacement for useState() if you need more powerful state management.

24. const[state,dispatchFn] = useReducer(reduceFn,initialState,initFn);

25.Context:一种组件间通信的方式，常用于【祖先组件】与【后代组件】间的通信。
-创建Context容器对象: const xxxContext = React.createContext()
-渲染子组件时，外面包裹xxxContext.Provider,通过value属性给后代传递数据。
<xxxContext.Provider value={data}> 子组件 </xxxContext.Provider>

-后代组件读取数据的方法:
<xxxContext.Consumer> {value=(//value就是context中value的数据)}  </xxxContext.Consumer>

26.{this.props.children} 

27.useReducer(reducer,initialValue)函数通常传入2个参数，第1个参数为我们定义的一个“由dispatch引发的数据修改处理函数”，
第2个参数为自定义数据的默认值，useReducer函数会返回自定义变量的引用和该自定义变量对应的“dispatch”。
import React, { useReducer } from 'react'; //引入useReducer

//定义好“事件处理函数” reducer
function reducer(state, action) {
  switch (action) {
    case 'xx':
        return xxxx;
    case 'xx':
        return xxxx;
    default:
        return xxxx;
  }
}

function Component(){
  //声明一个变量xxx，以及对应修改xxx的dispatch
  //将事件处理函数reducer和默认值initialValue作为参数传递给useReducer
  const [xxx, dispatch] = useReducer(reducer, initialValue); 

  //若想获取xxx的值，直接使用xxx即可
  
  //若想修改xxx的值，通过dispatch来修改
  dispatch('xx');
}

//请注意，上述代码中的action只是最基础的字符串形式，事实上action可以是多属性的object，这样可以自定义更多属性和更多参数值
//例如 action 可以是 {type:'xx',param:xxx}

useReducer使用示例2：

import React, { useReducer } from 'react';

function reducer(state,action){
  switch(action){
    case 'add':
        return state + 1;
    case 'sub':
        return state - 1;
    case 'mul':
        return state * 2;
    default:
        console.log('what?');
        return state;
  }
}

function CountComponent() {
  const [count, dispatch] = useReducer(reducer,0);

  return <div>
    {count}
    <button onClick={() => {dispatch('add')}} >add</button>
    <button onClick={() => {dispatch('sub')}} >sub</button>
    <button onClick={() => {dispatch('mul')}} >mul</button>
  </div>;
}

export default CountComponent;


useReducer使用示例2:
import React, { useReducer } from 'react';

function reducer(state,action){
  //根据action.type来判断该执行哪种修改
  switch(action.type){
    case 'add':
      //count 最终加多少，取决于 action.param 的值
      return state + action.param;
    case 'sub':
      return state - action.param;
    case 'mul':
      return state * action.param;
    default:
      console.log('what?');
      return state;
  }
}

function getRandom(){
  return Math.floor(Math.random()*10);
}

function CountComponent() {
  const [count, dispatch] = useReducer(reducer,0);

  return <div>
    {count}
    <button onClick={() => {dispatch({type:'add',param:getRandom()})}} >add</button>
    <button onClick={() => {dispatch({type:'sub',param:getRandom()})}} >sub</button>
    <button onClick={() => {dispatch({type:'mul',param:getRandom()})}} >mul</button>
  </div>;
}

export default CountComponent;

28. React Context is Not optimized for high frequency changes!



