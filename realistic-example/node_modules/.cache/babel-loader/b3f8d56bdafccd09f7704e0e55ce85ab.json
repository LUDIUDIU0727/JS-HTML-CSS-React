{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react/cjs/react.production.min\";\n\nconst useHttp = (requestConfig, applydata) => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [tasks, setTasks] = useState([]);\n\n  const sendRequst = async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(requestConfig.url, {\n        method: requestConfig.method ? requestConfig.method : 'GET',\n        headers: requestConfig.headers ? requestConfig.headers : {},\n        body: requestConfig.body ? JSON.stringify(requestConfig.body) : null\n      });\n\n      if (!response.ok) {\n        throw new Error('Request failed!');\n      }\n\n      const data = await response.json();\n      applydata(data);\n    } catch (err) {\n      setError(err.message || 'Something went wrong!');\n    }\n\n    setIsLoading(false);\n  };\n\n  return {\n    isLoading: isLoading,\n    error: error,\n    sendRequst: sendRequst\n  };\n};\n\n_s(useHttp, \"n5SlQVdc2sZg3OeT00ajYzBfpL0=\");\n\nexport default useHttp;","map":{"version":3,"sources":["/Users/lulu/Desktop/study/realistic-example/src/Hooks/use-http.js"],"names":["useState","useHttp","requestConfig","applydata","isLoading","setIsLoading","error","setError","tasks","setTasks","sendRequst","response","fetch","url","method","headers","body","JSON","stringify","ok","Error","data","json","err","message"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,gCAAzB;;AAGA,MAAMC,OAAO,GAAG,CAACC,aAAD,EAAgBC,SAAhB,KAA8B;AAAA;;AAC1C,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,EAAD,CAAlC;;AAEA,QAAMU,UAAU,GAAG,YAAY;AAC3BL,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,QAAI;AACA,YAAMI,QAAQ,GAAG,MAAMC,KAAK,CACxBV,aAAa,CAACW,GADU,EACL;AACnBC,QAAAA,MAAM,EAAEZ,aAAa,CAACY,MAAd,GAAuBZ,aAAa,CAACY,MAArC,GAA8C,KADnC;AAEnBC,QAAAA,OAAO,EAAEb,aAAa,CAACa,OAAd,GAAwBb,aAAa,CAACa,OAAtC,GAAgD,EAFtC;AAGnBC,QAAAA,IAAI,EAAEd,aAAa,CAACc,IAAd,GAAqBC,IAAI,CAACC,SAAL,CAAehB,aAAa,CAACc,IAA7B,CAArB,GAA0D;AAH7C,OADK,CAA5B;;AASA,UAAI,CAACL,QAAQ,CAACQ,EAAd,EAAkB;AACd,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACH;;AAED,YAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAT,EAAnB;AACAnB,MAAAA,SAAS,CAACkB,IAAD,CAAT;AAGH,KAlBD,CAkBE,OAAOE,GAAP,EAAY;AACVhB,MAAAA,QAAQ,CAACgB,GAAG,CAACC,OAAJ,IAAe,uBAAhB,CAAR;AACH;;AACDnB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,GAzBD;;AA2BA,SAAO;AACHD,IAAAA,SAAS,EAAEA,SADR;AAEHE,IAAAA,KAAK,EAAEA,KAFJ;AAGHI,IAAAA,UAAU,EAAEA;AAHT,GAAP;AAOH,CAvCD;;GAAMT,O;;AA2CN,eAAeA,OAAf","sourcesContent":["import { useState } from \"react/cjs/react.production.min\";\n\n\nconst useHttp = (requestConfig, applydata) => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(null);\n    const [tasks, setTasks] = useState([]);\n\n    const sendRequst = async () => {\n        setIsLoading(true);\n        setError(null);\n        try {\n            const response = await fetch(\n                requestConfig.url, {\n                method: requestConfig.method ? requestConfig.method : 'GET',\n                headers: requestConfig.headers ? requestConfig.headers : {},\n                body: requestConfig.body ? JSON.stringify(requestConfig.body) : null\n            }\n\n            );\n\n            if (!response.ok) {\n                throw new Error('Request failed!');\n            }\n\n            const data = await response.json();\n            applydata(data);\n\n\n        } catch (err) {\n            setError(err.message || 'Something went wrong!');\n        }\n        setIsLoading(false);\n    };\n\n    return {\n        isLoading: isLoading,\n        error: error,\n        sendRequst: sendRequst\n    };\n\n\n};\n\n\n\nexport default useHttp;"]},"metadata":{},"sourceType":"module"}